<?php
/**
 * InvoiceCreditRequestV2Model
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Capayable API V2
 *
 * API for Pay after delivery and Pay in 3 installments
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.5
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InvoiceCreditRequestV2Model Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InvoiceCreditRequestV2Model implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InvoiceCreditRequestV2Model';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'transaction_number' => 'string',
        'return_number' => 'string',
        'credit_amount' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'transaction_number' => null,
        'return_number' => null,
        'credit_amount' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'transaction_number' => 'TransactionNumber',
        'return_number' => 'ReturnNumber',
        'credit_amount' => 'CreditAmount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'transaction_number' => 'setTransactionNumber',
        'return_number' => 'setReturnNumber',
        'credit_amount' => 'setCreditAmount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'transaction_number' => 'getTransactionNumber',
        'return_number' => 'getReturnNumber',
        'credit_amount' => 'getCreditAmount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['transaction_number'] = isset($data['transaction_number']) ? $data['transaction_number'] : null;
        $this->container['return_number'] = isset($data['return_number']) ? $data['return_number'] : null;
        $this->container['credit_amount'] = isset($data['credit_amount']) ? $data['credit_amount'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['transaction_number'] === null) {
            $invalidProperties[] = "'transaction_number' can't be null";
        }
        if ((mb_strlen($this->container['transaction_number']) > 32)) {
            $invalidProperties[] = "invalid value for 'transaction_number', the character length must be smaller than or equal to 32.";
        }

        if ((mb_strlen($this->container['transaction_number']) < 0)) {
            $invalidProperties[] = "invalid value for 'transaction_number', the character length must be bigger than or equal to 0.";
        }

        if (!preg_match("/[a-fA-F0-9]{32}/", $this->container['transaction_number'])) {
            $invalidProperties[] = "invalid value for 'transaction_number', must be conform to the pattern /[a-fA-F0-9]{32}/.";
        }

        if ($this->container['return_number'] === null) {
            $invalidProperties[] = "'return_number' can't be null";
        }
        if ((mb_strlen($this->container['return_number']) > 150)) {
            $invalidProperties[] = "invalid value for 'return_number', the character length must be smaller than or equal to 150.";
        }

        if ((mb_strlen($this->container['return_number']) < 0)) {
            $invalidProperties[] = "invalid value for 'return_number', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['credit_amount'] === null) {
            $invalidProperties[] = "'credit_amount' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets transaction_number
     *
     * @return string
     */
    public function getTransactionNumber()
    {
        return $this->container['transaction_number'];
    }

    /**
     * Sets transaction_number
     *
     * @param string $transaction_number Guid, no hyphens
     *
     * @return $this
     */
    public function setTransactionNumber($transaction_number)
    {
        if ((mb_strlen($transaction_number) > 32)) {
            throw new \InvalidArgumentException('invalid length for $transaction_number when calling InvoiceCreditRequestV2Model., must be smaller than or equal to 32.');
        }
        if ((mb_strlen($transaction_number) < 0)) {
            throw new \InvalidArgumentException('invalid length for $transaction_number when calling InvoiceCreditRequestV2Model., must be bigger than or equal to 0.');
        }
        if ((!preg_match("/[a-fA-F0-9]{32}/", $transaction_number))) {
            throw new \InvalidArgumentException("invalid value for $transaction_number when calling InvoiceCreditRequestV2Model., must conform to the pattern /[a-fA-F0-9]{32}/.");
        }

        $this->container['transaction_number'] = $transaction_number;

        return $this;
    }

    /**
     * Gets return_number
     *
     * @return string
     */
    public function getReturnNumber()
    {
        return $this->container['return_number'];
    }

    /**
     * Sets return_number
     *
     * @param string $return_number The shopâ€™s return reference
     *
     * @return $this
     */
    public function setReturnNumber($return_number)
    {
        if ((mb_strlen($return_number) > 150)) {
            throw new \InvalidArgumentException('invalid length for $return_number when calling InvoiceCreditRequestV2Model., must be smaller than or equal to 150.');
        }
        if ((mb_strlen($return_number) < 0)) {
            throw new \InvalidArgumentException('invalid length for $return_number when calling InvoiceCreditRequestV2Model., must be bigger than or equal to 0.');
        }

        $this->container['return_number'] = $return_number;

        return $this;
    }

    /**
     * Gets credit_amount
     *
     * @return int
     */
    public function getCreditAmount()
    {
        return $this->container['credit_amount'];
    }

    /**
     * Sets credit_amount
     *
     * @param int $credit_amount Requested amount to credit to cents.
     *
     * @return $this
     */
    public function setCreditAmount($credit_amount)
    {
        $this->container['credit_amount'] = $credit_amount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


